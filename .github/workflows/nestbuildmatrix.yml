name: NEST matrix
env:
  #xGSL: "0"
  #xLIBBOOST: "0"
  #xLIBNEUROSIM: "0"
  #xLTDL: "0"
  #xMPI: "0"
  #xMUSIC: "0"
  #xOPENMP: "0"
  #xPYTHON: "0"
  #xREADLINE: "0"
  #xSIONLIB: "0"
  CXX_FLAGS: "-pedantic -Wextra -Woverloaded-virtual -Wno-unknown-pragmas"
  PYTHONPATH: ${{ github.workspace }}/build/python
on: push
jobs:
  setup:
     if: ${{ !contains(github.event.head_commit.message, 'ci skip') }}
     runs-on: ${{ matrix.os }}
     strategy:
       fail-fast: false
       matrix:
         #os: [ubuntu-latest, macos-latest]
         os: ["ubuntu-20.04", macos-latest]
         #cxx: ["g++"]
         #cc:  ["gcc"]
         #ver: ["9"]
         cpp_compiler: ["gcc", "clang"]
         xNEST_BUILD_TYPE: ["STATIC_CODE_ANALYSIS", "MINIMAL", "MPI_ONLY", "OPENMP_ONLY", "FULL"]
         include: 
           - os: "ubuntu-20.04"
             #TARGET: x86_64-unknown-linux-musl
             COMPILER: clang
             LINKER: clang
         exclude: 
           - xNEST_BUILD_TYPE: "STATIC_CODE_ANALYSIS"
             os: macos-latest
             cpp_compiler: "clang" 
           - xNEST_BUILD_TYPE: "MPI_ONLY"
             cpp_compiler: "clang"
             os: macos-latest
           - xNEST_BUILD_TYPE: "OPENMP_ONLY"
             cpp_compiler: "clang"
             os: macos-latest
           - xNEST_BUILD_TYPE: "FULL"
             os: macos-latest
             cpp_compiler: "clang"
           - xNEST_BUILD_TYPE: "STATIC_CODE_ANALYSIS"
             os: "ubuntu-20.04"
             cpp_compiler: "clang" 
           - xNEST_BUILD_TYPE: "MPI_ONLY"
             cpp_compiler: "clang"
             os: "ubuntu-20.04"
           - xNEST_BUILD_TYPE: "OPENMP_ONLY"
             cpp_compiler: "clang"
             os: "ubuntu-20.04"
           - xNEST_BUILD_TYPE: "FULL"
             os: "ubuntu-20.04"
             cpp_compiler: "clang"
           - xNEST_BUILD_TYPE: "STATIC_CODE_ANALYSIS"
             os: macos-latest
             cpp_compiler: "gcc" 
           - xNEST_BUILD_TYPE: "MPI_ONLY"
             cpp_compiler: "gcc"
             os: macos-latest
           - xNEST_BUILD_TYPE: "OPENMP_ONLY"
             cpp_compiler: "gcc"
             os: macos-latest
           - xNEST_BUILD_TYPE: "FULL"
             os: macos-latest
             cpp_compiler: "gcc"
                                                 
     steps:
                       
       # Steps represent a sequence of tasks that will be executed as part of the job
       - name: Checkout repo content 
         #uses: actions/checkout@v2 # checkout the repository content to github runner.
         uses: actions/checkout@master
         
       - name: Check Python path
         run: echo $PYTHONPATH
       
       - name: Set up cmake
         uses: jwlawson/actions-setup-cmake@v1.7
         with: 
           cmake-version: 3.19.2
      
       - name: Say Something
         run: |
           echo "Hello ${message}"
           echo "Again Welcome"
           echo $PATH
           echo $PWD
         shell: bash
       - name: Set up Python 3.x
         uses: actions/setup-python@v2
         with:
           python-version: 3.9
           
       - name: OpenMPI cache
         uses: actions/cache@v2
         id:   cache-ompi
         with:
            path: ~/openmpi-4.0.2
            key:  ${{ matrix.config.os }}-openmpi-4.0.2-${{ matrix.config.cxx }}
       - name: Build OpenMPI
         if: ${{ steps.cache-ompi.outputs.cache-hit != 'true' }}
         run: |
           echo cache-hit='${{ steps.cache-ompi.outputs.cache-hit }}'
           cd ~
           wget https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.2.tar.gz
           tar -xvf ./openmpi-4.0.2.tar.gz
           cd openmpi-4.0.2
           ./configure --disable-mpi-fortran
           make -j4
       - name: Install OpenMPI
         run: |
           echo "Going to install ompi"
           cd ~
           cd openmpi-4.0.2
           sudo make install
           cd -
        
       - name: MacOS
         if: runner.os =='macOS'
         run: |
            brew install coreutils gsl open-mpi automake autoconf libtool
            brew info python
       - name: Dependencies Linux
         if: contains(matrix.os, 'ubuntu')
         run: |
           sudo apt-get update
           #https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
           sudo apt-get install libltdl-dev libreadline6-dev libncurses5-dev libgsl0-dev python3-all-dev jq pep8 libpcre3 libpcre3-dev
           sudo apt-get install openmpi-bin libopenmpi-dev
       - name: Install dependencies
         #uses: actions/cache@master
         run: |
            python -m pip install --upgrade pip setuptools
            python -m pip install scipy junitparser numpy nose cython matplotlib terminaltables
            python -m pip install nose
            pip list
            g++ --version
            set -o pipefail
            #chmod +x extras/staticbuild.sh
            #./extras/staticbuild.sh
            
       - name: Check config
         run: |
           $CC --version
           $CXX --version
           python --version
           mpic++ --show
           mpicc --show
           echo $PYTHONPATH   
            
       - if: ${{ matrix.xNEST_BUILD_TYPE == 'STATIC_CODE_ANALYSIS' }}
         #run: echo "MPI Only Build"
         #with: ${{ env.xMPI }}
         run: |
           #https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable
           echo "xNEST_BUILD_TYPE=STATIC_CODE_ANALYSIS" >> $GITHUB_ENV
           chmod +x extras/staticbuild.sh
           ./extras/staticbuild.sh
         env:
           xNEST_BUILD_TYPE: "STATIC_CODE_ANALYSIS"  
                       
           #GET CHANGED FILES
           # https://github.com/marketplace/actions/get-changed-files
  #build:
    #runs-on: ${{ matrix.os }}
    #needs: setup
    #steps:                   
       - if: ${{ matrix.xNEST_BUILD_TYPE == 'MINIMAL' }}
         #run: echo "Minimal Build"
         run: |
           #echo $GITHUB_ENV
           chmod +x extras/staticbuild.sh
           ./extras/staticbuild.sh
         env:
           xNEST_BUILD_TYPE: "MINIMAL"     
         
       - if: ${{ matrix.xNEST_BUILD_TYPE == 'MPI_ONLY' }}
         #run: echo "Minimal Build"
         run: |
           echo "xNEST_BUILD_TYPE=MPI_ONLY" >> $GITHUB_ENV
           #echo $GITHUB_ENV
           chmod +x extras/staticbuild.sh
           ./extras/staticbuild.sh
         env:
           xNEST_BUILD_TYPE: MPI_ONLY
           
       - if: ${{ matrix.xNEST_BUILD_TYPE == 'OPENMP_ONLY' }}
         #run: echo "Minimal Build"
         run: |
           echo "xNEST_BUILD_TYPE=OPENMP_ONLY" >> $GITHUB_ENV
           echo $GITHUB_ENV
           chmod +x extras/staticbuild.sh
           ./extras/staticbuild.sh
         env:
          xNEST_BUILD_TYPE: OPENMP_ONLY 
           
       - if: ${{ matrix.xNEST_BUILD_TYPE == 'FULL' }}
         #run: echo "Minimal Build"
         run: |
           echo "xNEST_BUILD_TYPE=FULL" >> $GITHUB_ENV
           $GITHUB_ENV
           chmod +x extras/staticbuild.sh
           ./extras/staticbuild.sh   
         env:
           xNEST_BUILD_TYPE: FULL   
           
       #- name: MPI
         #run: echo "MPI BUILD"
         #if: env.xNEST_BUILD_TYPE == 'MINIMAL'     
       #- name: Full build
       #  env:
       #    key: xNEST_BUILD_TYPE=FULL
       #  run: echo "Full build"
                      
  
